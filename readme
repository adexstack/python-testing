https://mothergeo-py.readthedocs.io/en/latest/development/how-to/venv.html
Checkout Corey Schafer youtube:  https://www.youtube.com/watch?v=N5vscPTWKOk
https://dev.to/meetsohail/change-the-python3-default-version-in-ubuntu-1ekb (Needed to do this for jenkins to use python3)

(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ py.test -v app/calculate_test.py
(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ py.test -r f app/calculate_test.py
f(failed) E(error) s(skipped) x(failed) X(passed)
(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ py.test --pdb app/calculate_test.py
use: u up,d down,n next,w where,b break, list, exit

(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ pip install pytest-cov
(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ py.test --cov app/ app/

Chapter 5: Driving Development with Test (TDD)
Ping-Pong Programming: advantage over pair programming is that it takes away over-dominance of the more experienced developer:
  One developer writes the failing Test and the other code it to pass. Hence learning from each other while also delivering.
unittest.Testcase, pytest, nosetest, --cov,

Chapter 6: Acceptance Test
Note: Flask & Lettuce was not working well to pass the BDD test; hence used behave with requests
Guess this was because the book was based on python2.7 (I use python3.5) compatibility issue
Only made 2 steps passed, the book made 4 steps passed using Flask and index.html template

Tables of Data in Scenarios

Tagging: https://readthedocs.org/projects/behave/downloads/pdf/latest/
(venv35) root@ubuntupython:~/PycharmProjects/pythonTesting# behave bank/test/bdd    (running all)
(venv35) root@ubuntupython:~/PycharmProjects/pythonTesting# behave bank/test/bdd --tags=mytag     (including tagged)
(venv35) root@ubuntupython:~/PycharmProjects/pythonTesting# behave bank/test/bdd --tags=-mytag    (excluding tagged)
(venv35) root@ubuntupython:~/PycharmProjects/pythonTesting# behave bank/test/bdd --junit

10 Automating Your Process :
----------------------------
Executing Paver Tasks; in pavement.py
(venv35) vagrant@ubuntupython:~/PycharmProjects/pythonTesting$ paver unit_tests

Jenkins:
------------------------
https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04
https://www.youtube.com/watch?v=iotloCXtIzY   (jenkins job shell commands)
http://10.23.45.11:8080/
admin admin, Shay Testing, shaytesting1@gmail.com

https://devops4solutions.medium.com/setup-ssh-between-jenkins-and-github-6ec7c7933244
configure keygen in linux, on git(id_rsa.pub), jenkins credential plugin (choosing ssh)

Dealing with Github “ssh: Could not resolve hostname github.com:
Name or services not know, fatal: Could not read from remote repository Error”

https://pytest-cov.readthedocs.io/en/latest/reporting.html

Deploying app to the cloud using heroku cloud
-----------------------------------------------

Downloaded heroku to use the cli:   curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
heroku --version
heroku login -i

https://dashboard.heroku.com/apps/python-apptesting/deploy/heroku-git
$ cd my-project/
$ git init
$ heroku git:remote -a python-apptesting
--------------------------------------------------------------------------------
(venv35) vagrant@ubuntupython:~/PycharmProjects$ heroku login -i
 ›   Warning: heroku update available from 7.52.0 to 7.56.1.
heroku: Enter your login credentials
Email [saadedokun121@gmail.com]:
Password: ********* (Bidemi22@)
Logged in as saadedokun121@gmail.com
(venv35) vagrant@ubuntupython:~/PycharmProjects$ cd python-app-testing/
(venv35) vagrant@ubuntupython:~/PycharmProjects/python-app-testing$ git push heroku master
Everything up-to-date
(venv35) vagrant@ubuntupython:~/PycharmProjects/python-app-testing$

View deployed app here: https://python-apptesting.herokuapp.com/
---------------------------------------------------------------------------------------------------------

# https://stackoverflow.com/questions/30554702/cant-connect-to-flask-web-service-connection-refused
# To see the Flask web app displayed on browser; had to include app.run(host='0.0.0.0'), also enabled port 5000
# vagrant@ubuntupython:~$ sudo ufw allow 5000
# and accessed browser with http://10.23.45.11:5000


